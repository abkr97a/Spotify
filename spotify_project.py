# -*- coding: utf-8 -*-
"""Spotify Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pVsTqeBShMUKfHG9TSIFJd5oh80NzrbA

**Download the dataset from kaggle**

https://www.kaggle.com/datasets/asaniczka/top-spotify-songs-in-73-countries-daily-updated
"""

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d asaniczka/top-spotify-songs-in-73-countries-daily-updated

! unzip /content/top-spotify-songs-in-73-countries-daily-updated.zip

"""**Data Loading and Preprocessing**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/universal_top_spotify_songs.csv')
df.head(5)

print (df.shape)
df.info()

df.isna().sum()

print(df.columns)

df = df.dropna(subset = ['country', 'artists', 'name', 'album_name', 'album_release_date'])
df.isna().sum()

"""**Feature Engineering**"""

df['snapshot_date'] = pd.to_datetime(df['snapshot_date'])
df['album_release_date'] = pd.to_datetime(df['album_release_date'])
df['since_release'] = (df['snapshot_date'] - df['album_release_date']).dt.days
df['is_explicit'] = df['is_explicit'].astype('category')
df.info()

df['release_year'] = df['album_release_date'].dt.year
df['release_month'] = df['album_release_date'].dt.month
df['release_day'] = df['album_release_date'].dt.day
df['snapshot_year'] = df['snapshot_date'].dt.year
df['snapshot_month'] = df['snapshot_date'].dt.month
df['snapshot_day'] = df['snapshot_date'].dt.day
df.sample(3)

features = ['danceability', 'energy', 'key', 'loudness', 'mode',
            'speechiness', 'acousticness', 'instrumentalness',
            'liveness', 'valence']

artist_popularity = df.groupby('artists')['popularity'].mean().reset_index()
artist_popularity = artist_popularity.sort_values(by='popularity', ascending=False)

print(df['country'].unique())

iso = pd.read_excel('/content/country codes.xls')
iso.head(5)

df = pd.merge(df, iso[['Code Value', 'Definition']], left_on='country', right_on='Code Value', how='left')
df.head(5)

print (df['Definition'].unique().shape)

df.rename(columns={'country': 'country_code', 'Definition': 'country_name'}, inplace=True)
df = df.drop('Code Value', axis=1)
df.head(5)

"""**EDA**"""

country_name = "Egypt"
df_city = df [(df.country_name == country_name)]
print(df_city.shape)
df_city.head(5)

#Top Songs
top_songs = df_city['name'].value_counts().head(10)
print("Top 10 Songs:")
top_songs

#Top Artists
top_artists = df_city['artists'].value_counts().head(10)
print("Top 10 Artists:")
top_artists

#Average Popularity by Year
popularity_by_year = df_city.groupby('release_year')['popularity'].mean().sort_values(ascending=False)
print("Average Popularity by Year:")
popularity_by_year

#Average Tempo in city (mean)
avg_tempo_city = df_city['tempo'].mean()
print(f"Average Tempo in the City: {avg_tempo_city}")

top_genres = df_city['danceability'].value_counts().head(10)
print("Top Genres:")
top_genres

#Top 10 songs Danceability
danceability_songs = df_city.drop_duplicates(subset=['name'])
top_danceability_songs = danceability_songs.sort_values(by='danceability', ascending=False)
top_10_unique_danceability_songs = top_danceability_songs[['name', 'artists','since_release','danceability']].head(10)
print("Top 10 Unique Songs by Danceability:")
top_10_unique_danceability_songs

#Bottom 10 songs Danceability
danceability_songs = df_city.drop_duplicates(subset=['name'])
low_danceability_songs = danceability_songs.sort_values(by='danceability', ascending=True)
low_10_danceability_songs = low_danceability_songs[['name', 'artists','since_release','danceability']].head(10)
print("Low 10 Unique Songs by Danceability:")
low_10_danceability_songs

#Top 10 with instrumental
instrumentalness_songs = df_city.drop_duplicates(subset=['name'])
top_instrumentalness_songs = instrumentalness_songs.sort_values(by='instrumentalness', ascending=False)
top_10_instrumentalness_songs = top_instrumentalness_songs[['name', 'artists','since_release','instrumentalness']].head(10)
print("Top 10 Unique Songs by Instrumental:")
top_10_instrumentalness_songs

#Features of song (avg) in the city
average_values = {feature: df[feature].mean() for feature in features}
average_df = pd.DataFrame(list(average_values.items()), columns=['Feature', 'Average Value'])
sorted_df = average_df.sort_values(by='Average Value', ascending=False)
sorted_df

#Explict Counts
explicit_counts = df_city['is_explicit'].value_counts()
print("Explicit Counts:")
explicit_counts

"""**Data Visualization**"""

#Graph 1
plt.figure(figsize=(10, 6))
plt.bar(average_df['Feature'], average_df['Average Value'], color='skyblue')
plt.title('Comparison of Average Values for Different Features')
plt.xlabel('Feature')
plt.ylabel('Average Value')
plt.xticks(rotation=45)
plt.show()

#Graph 2 #I have a problem with arabic chars on charts
plt.figure(figsize=(14, 7))
top_songs = df_city['name'].value_counts().head(10)
sns.barplot(x=top_songs.values, y=top_songs.index, palette='viridis')
plt.title('Top 10 Songs by Popularity')
plt.xlabel('Number of Times in Top 10')
plt.show()

plt.figure(figsize=(14, 7))
top_artists = df_city['artists'].value_counts().head(10)
sns.barplot(x=top_artists.values, y=top_artists.index, palette='viridis')
plt.title('Top 10 Artists by Popularity')
plt.xlabel('Number of Times in Top 10')
plt.show()

from google.colab import drive
drive.mount('/content/drive')

#Graph 3
plt.figure(figsize=(12, 6))
popularity_by_year = df_city.groupby('release_year')['popularity'].mean()
sns.lineplot(x=popularity_by_year.index, y=popularity_by_year.values, marker='o')
plt.title('Average Popularity by Release Year')
plt.xlabel('Year')
plt.ylabel('Average Popularity')
plt.grid(True)
plt.show()

#Graph 4
plt.figure(figsize=(12, 10))
corr = df_city[features].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f', vmin=-1, vmax=1)
plt.title('Correlation Heatmap')
plt.show()

#Graph 5
explicit_counts = df_city['is_explicit'].value_counts()
labels = ['Explicit', 'Not Explicit']
sizes = explicit_counts
colors = ['#ff9999','#66b3ff']
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, wedgeprops={'edgecolor': 'black'})
plt.title('Distribution of Explicit vs. Non-Explicit Songs', fontsize=16)
plt.show()

"""**Streamlit Dashboard**"""

!pip install streamlit

!npm install localtunnel

import urllib
print("Password/Enpoint IP for localtunnel is:",urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip("\n"))

# run streamlit server in backgound
!streamlit run  app.py&>/content/logs.txt & npx localtunnel --port 8501